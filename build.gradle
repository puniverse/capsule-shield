plugins {
    id 'java'
    id 'maven'
    id 'signing'
}

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

group               = "co.paralleluniverse"
version             = "0.3.0-SNAPSHOT"
status              = "integration"
description         = "Container Caplet"
ext.url             = "http://puniverse.github.com/quasar"
ext.vendor          = "Parallel Universe Software Co."
ext.licenseName     = "Eclipse Public License - v 1.0"
ext.licenseUrl      = "http://www.eclipse.org/legal/epl-v10.html"
ext.scmUrl          = "https://github.com/puniverse/${project.name}"
ext.scmConnection   = "https://github.com/puniverse/${project.name}.git"
ext.distDir         = "$buildDir/dist"
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

ext.capsule = 'Capsule'
ext.caplet  = 'ShieldedCapsule'

ext.capsuleVer        = '1.0.1'
ext.log4j2Ver         = '2.4'
ext.slf4jVer          = '1.7.12'

if (!project.hasProperty("sonatypeUsername") || !project.hasProperty("sonatypePassword")) {
    println "sonatype username or password not set"
    ext.sonatypeUsername = ""
    ext.sonatypePassword = ""
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

configurations {
    [compile, runtime]*.resolutionStrategy {
        failOnVersionConflict()
    }
}

configurations {
    provided
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
}

dependencies {
    compile "$group:capsule:$capsuleVer"
    compile "$group:capsule-util:$capsuleVer"

    compile "org.apache.logging.log4j:log4j-api:$log4j2Ver"
    compile "org.apache.logging.log4j:log4j-web:$log4j2Ver"

    compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4j2Ver"         // SLF4J   -> Log4J2
    compile "org.slf4j:jul-to-slf4j:$slf4jVer"                             // JUL     -> SLF4J (-> Log4J2)

    runtime "org.slf4j:jcl-over-slf4j:$slf4jVer"                           // JCL     -> SLF4J (-> Log4J2)
    runtime "org.slf4j:log4j-over-slf4j:$slf4jVer"                         // Log4J12 -> SLF4J (-> Log4J2)
}

jar {
    from { configurations.runtime.collect { zipTree(it) } }
    manifest {
        attributes (
            'Premain-Class' : capsule,
            'Main-Class'    : capsule,
            'Caplets'       : caplet
        )
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

///////// Publish Artifacts
apply plugin: 'maven'
apply plugin: 'signing'

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { deployment -> signing.signPom(deployment) }

            repository(
                url: (isReleaseVersion ?
                        "https://oss.sonatype.org/service/local/staging/deploy/maven2" :
                        "https://oss.sonatype.org/content/repositories/snapshots")) {
                // User and Password are taken from ~/.gradle/gradle.properties
                authentication(userName: project.sonatypeUsername, password: project.sonatypePassword)
            }
            pom.project {
                name project.name
                packaging 'jar'
                description project.description
                url project.url
                scm {
                    url project.scmUrl
                    connection project.scmConnection
                    developerConnection project.scmConnection
                }
                licenses {
                    license {
                        name project.licenseName
                        url project.licenseUrl
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'pron'
                        name 'Ron Pressler'
                    }
                    developer {
                        id 'circlespainter'
                        name 'Fabio Tudone'
                    }
                }
            }
        }
    }
}

install.repositories.mavenInstaller {
    pom.whenConfigured {
        it.dependencies.clear()
    }
}

uploadArchives.repositories.mavenDeployer {
    pom.whenConfigured {
        it.dependencies.clear()
    }
}

defaultTasks 'build'
