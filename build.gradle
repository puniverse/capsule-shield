buildscript {
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.0'
    }
}

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.1'
    id 'maven'
    id 'signing'
    // id 'net.sf.proguard.proguard-gradle' version '5.0'
}

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

mainClassName = 'Capsule'

group       = "co.paralleluniverse"
version     = "0.2.0-SNAPSHOT"
status      = "integration"
description = "Container Caplet"
ext.url             = "http://puniverse.github.com/quasar"
ext.vendor          = "Parallel Universe Software Co."
ext.licenseName     = "Eclipse Public License - v 1.0"
ext.licenseUrl      = "http://www.eclipse.org/legal/epl-v10.html"
ext.scmUrl          = "https://github.com/puniverse/${project.name}"
ext.scmConnection   = "https://github.com/puniverse/${project.name}.git"
ext.distDir         = "$buildDir/dist"
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

if (!project.hasProperty("sonatypeUsername") || !project.hasProperty("sonatypePassword")) {
    ext.sonatypeUsername = ""
    ext.sonatypePassword = ""
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

configurations {
    provided
}

sourceSets {
    main {
        compileClasspath += configurations.provided
        test.compileClasspath += configurations.provided
        test.runtimeClasspath += configurations.provided
    }
}

dependencies {
    compile 'co.paralleluniverse:capsule:1.0.1-SNAPSHOT'
    compile 'co.paralleluniverse:capsule-util:1.0.1-SNAPSHOT'
    compile 'log4j:log4j:1.2.17'
    provided 'org.slf4j:jul-to-slf4j:1.7.12'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

shadowJar {
    outputs.upToDateWhen { false }

    // artifactAttached = false
    classifier = '' // overwrite jar
    destinationDir = file("$buildDir/libs")

    exclude 'META-INF/**'
    exclude 'org/apache/log4j/xml/log4j.dtd'

    relocate 'org.', 'capsule.org.'

    manifest {
        attributes (
            'Premain-Class' : mainClassName,
            'Main-Class'    : mainClassName,
            'Caplets'       : 'ShieldedCapsule'
        )
    }
}

task proguard(type: proguard.gradle.ProGuardTask, dependsOn:[shadowJar]) {
    injars jar
    outjars "$buildDir/libs/${project.name}-${version}-shrunk.jar"
    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"

    keep "class Capsule { *; }"
    keep "class ShieldedCapsule { *; }"
    keeppackagenames "co.paralleluniverse.capsule"

    dontoptimize
    dontobfuscate
    dontwarn

    doLast {
        logger.info("$buildDir/libs/${project.name}-${project.version}-shrunk.jar -> $buildDir/libs/${project.name}-${project.version}.jar")
        def out = file("$buildDir/libs/${project.name}-${project.version}.jar")
        if (out.exists())
            out.delete()
        file("$buildDir/libs/${project.name}-${version}-shrunk.jar").renameTo(out)
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

///////// Publish Artifacts
apply plugin: 'maven'
apply plugin: 'signing'

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { deployment -> signing.signPom(deployment) }

            repository(
                url: (isReleaseVersion ?
                        "https://oss.sonatype.org/service/local/staging/deploy/maven2" :
                        "https://oss.sonatype.org/content/repositories/snapshots")) {
                // User and Password are taken from ~/.gradle/gradle.properties
                authentication(userName: project.sonatypeUsername, password: project.sonatypePassword)
            }
            pom.project {
                name project.name
                packaging 'jar'
                description project.description
                url project.url
                scm {
                    url project.scmUrl
                    connection project.scmConnection
                    developerConnection project.scmConnection
                }
                licenses {
                    license {
                        name project.licenseName
                        url project.licenseUrl
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'pron'
                        name 'Ron Pressler'
                    }
                }
            }
        }
    }
}

[assemble, build, install, signArchives, uploadArchives]*.dependsOn proguard

install.repositories.mavenInstaller {
    pom.whenConfigured {
        it.dependencies.clear()
    }
}

uploadArchives.repositories.mavenDeployer {
    pom.whenConfigured {
        it.dependencies.clear()
    }
}

defaultTasks 'build'
